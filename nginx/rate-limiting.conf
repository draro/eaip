# Nginx Rate Limiting Configuration for eAIP
#
# Security Finding Reference: H-004 (HIGH - CVSS 7.1)
#
# This configuration implements rate limiting to prevent:
# - Brute force attacks on authentication endpoints
# - API abuse and DOS attacks
# - Credential stuffing attacks
# - Resource exhaustion
#
# Installation:
# 1. Copy this file to /etc/nginx/conf.d/rate-limiting.conf
# 2. Test configuration: sudo nginx -t
# 3. Reload Nginx: sudo nginx -s reload

# Define rate limit zones in memory
# Zones use client IP address as the key

# Zone for general API requests
# 10MB zone = ~160,000 IP addresses
# Rate: 100 requests per minute (1.67 req/sec) per IP
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;

# Zone for authentication requests (stricter)
# Rate: 5 requests per minute per IP
limit_req_zone $binary_remote_addr zone=auth_limit:5m rate=5r/m;

# Zone for file uploads (more lenient but still protected)
# Rate: 20 requests per minute per IP
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=20r/m;

# Zone for search/query endpoints (moderate)
# Rate: 30 requests per minute per IP
limit_req_zone $binary_remote_addr zone=search_limit:10m rate=30r/m;

# Zone for static assets (very lenient)
# Rate: 200 requests per minute per IP
limit_req_zone $binary_remote_addr zone=static_limit:10m rate=200r/m;

# Connection limit per IP
# Maximum 10 concurrent connections from same IP
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Server block (add to your existing server configuration)
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com;

    # Apply connection limit to entire server
    limit_conn conn_limit 10;

    # Enable rate limit status in logs
    limit_req_status 429;
    limit_conn_status 429;

    # Custom error page for rate limiting (optional)
    error_page 429 /429.html;
    location = /429.html {
        internal;
        return 429 '{"success": false, "error": "Too many requests. Please try again later.", "code": "RATE_LIMIT_EXCEEDED"}';
        add_header Content-Type application/json always;
    }

    # Authentication endpoints (strictest rate limiting)
    location ~ ^/api/auth/(login|register|reset-password|verify) {
        limit_req zone=auth_limit burst=3 nodelay;

        # Log rate limit events
        access_log /var/log/nginx/auth_ratelimit.log combined;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # File upload endpoints
    location ~ ^/api/(dms/upload|documents/upload) {
        limit_req zone=upload_limit burst=5 nodelay;

        # Increase body size for file uploads
        client_max_body_size 100M;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts for large uploads
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
    }

    # Search endpoints
    location ~ ^/api/(search|documents/search|users/search) {
        limit_req zone=search_limit burst=10 nodelay;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # General API endpoints
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Static assets (images, CSS, JS)
    location ~ \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        limit_req zone=static_limit burst=50 nodelay;

        # Cache static assets
        expires 1y;
        add_header Cache-Control "public, immutable";

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # All other requests
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# HTTPS configuration (recommended for production)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com;

    # SSL certificates (update paths)
    ssl_certificate /path/to/fullchain.pem;
    ssl_certificate_key /path/to/privkey.pem;

    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Apply all rate limiting rules from HTTP block above
    limit_conn conn_limit 10;
    limit_req_status 429;
    limit_conn_status 429;

    error_page 429 /429.html;
    location = /429.html {
        internal;
        return 429 '{"success": false, "error": "Too many requests. Please try again later.", "code": "RATE_LIMIT_EXCEEDED"}';
        add_header Content-Type application/json always;
    }

    # Authentication endpoints
    location ~ ^/api/auth/(login|register|reset-password|verify) {
        limit_req zone=auth_limit burst=3 nodelay;
        access_log /var/log/nginx/auth_ratelimit.log combined;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # File upload endpoints
    location ~ ^/api/(dms/upload|documents/upload) {
        limit_req zone=upload_limit burst=5 nodelay;
        client_max_body_size 100M;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
    }

    # Search endpoints
    location ~ ^/api/(search|documents/search|users/search) {
        limit_req zone=search_limit burst=10 nodelay;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # General API endpoints
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Static assets
    location ~ \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        limit_req zone=static_limit burst=50 nodelay;
        expires 1y;
        add_header Cache-Control "public, immutable";

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # All other requests
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com;

    return 301 https://$server_name$request_uri;
}

#
# Testing Rate Limits:
#
# Test authentication rate limit (should block after 8 requests within 1 minute):
#   for i in {1..10}; do curl -X POST https://your-domain.com/api/auth/login \
#     -H "Content-Type: application/json" \
#     -d '{"email":"test@example.com","password":"wrong"}'; done
#
# Test API rate limit (should block after 120 requests within 1 minute):
#   for i in {1..150}; do curl https://your-domain.com/api/documents; done
#
# Monitor rate limit logs:
#   tail -f /var/log/nginx/auth_ratelimit.log
#   tail -f /var/log/nginx/error.log | grep 'limiting requests'
#
# View current rate limit statistics:
#   grep -c 'limiting requests' /var/log/nginx/error.log
#

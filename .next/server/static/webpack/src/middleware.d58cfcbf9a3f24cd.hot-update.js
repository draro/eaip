"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/middleware */ \"(middleware)/./node_modules/next-auth/middleware.js\");\n/* harmony import */ var next_auth_middleware__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_middleware__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var _lib_domain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/domain */ \"(middleware)/./src/lib/domain.ts\");\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_auth_middleware__WEBPACK_IMPORTED_MODULE_0__.withAuth)(async function middleware(req) {\n    const { pathname } = req.nextUrl;\n    const token = req.nextauth.token;\n    // Get hostname from X-Forwarded-Host (Nginx proxy) or fall back to req.nextUrl.hostname\n    const forwardedHost = req.headers.get(\"x-forwarded-host\") || req.headers.get(\"host\") || \"\";\n    const hostname = req.headers.get(\"x-forwarded-host\") || req.headers.get(\"host\") || new URL(req.url).hostname;\n    console.log(`[Middleware] Request: ${hostname}${pathname}`, {\n        \"x-forwarded-host\": req.headers.get(\"x-forwarded-host\"),\n        host: req.headers.get(\"host\"),\n        \"nextUrl.hostname\": req.nextUrl.hostname\n    });\n    // Skip processing for localhost and development\n    if (!req.headers.get(\"x-middleware-request\") && (hostname === \"localhost\" || forwardedHost.includes(\"localhost\"))) {\n        console.log(\"[Middleware] Skipping external localhost\");\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n    }\n    // Simple domain extraction\n    const cleanDomain = forwardedHost.toLowerCase().replace(/^www\\./, \"\");\n    // Check if this is a custom domain (not our main application domains)\n    const mainAppDomain = process.env.NEXTAUTH_URL?.replace(/^https?:\\/\\//, \"\").split(\"/\")[0] || \"eaip.flyclim.com\";\n    const isMainDomain = hostname === mainAppDomain || hostname === \"eaip.flyclim.com\" || // Always treat eaip.flyclim.com as main domain\n    hostname === \"localhost\" || hostname === \"0.0.0.0\" || hostname.includes(\"localhost\") || hostname.includes(\"vercel.app\") || hostname.includes(\"netlify.app\");\n    console.log(`[Middleware] Domain check:`, {\n        hostname,\n        cleanDomain,\n        mainAppDomain,\n        isMainDomain\n    });\n    // Handle tenant-specific domain routing\n    if (!isMainDomain && cleanDomain !== \"localhost\") {\n        try {\n            // For custom domains, use an API call to lookup organization\n            // Use localhost for internal API calls to avoid SSL issues\n            const internalOrigin = \"http://localhost:3000\";\n            const domainLookupUrl = new URL(\"/api/organizations/by-domain\", internalOrigin);\n            domainLookupUrl.searchParams.set(\"domain\", cleanDomain);\n            console.log(\"[Middleware] Fetching org data from:\", domainLookupUrl.toString());\n            const domainResponse = await fetch(domainLookupUrl.toString(), {\n                headers: {\n                    \"x-middleware-request\": \"true\"\n                }\n            });\n            if (domainResponse.ok) {\n                const domainData = await domainResponse.json();\n                if (domainData.success && domainData.organization) {\n                    // Set organization context headers\n                    const requestHeaders = new Headers(req.headers);\n                    requestHeaders.set(\"x-tenant-domain\", cleanDomain);\n                    requestHeaders.set(\"x-tenant-org-id\", domainData.organization._id);\n                    requestHeaders.set(\"x-tenant-org-name\", domainData.organization.name);\n                    // For authenticated users, validate they belong to this organization\n                    if (token) {\n                        const userOrgId = token.organizationId;\n                        const domainOrgId = domainData.organization._id;\n                        // Block cross-tenant access\n                        if (!_lib_domain__WEBPACK_IMPORTED_MODULE_2__.DomainService.validateUserAccess(userOrgId, domainOrgId) && !pathname.startsWith(\"/auth/signin\")) {\n                            console.log(`Access denied: User org ${userOrgId} accessing domain org ${domainOrgId}`);\n                            // Redirect to domain-specific login\n                            const loginUrl = new URL(\"/auth/signin\", req.url);\n                            loginUrl.searchParams.set(\"error\", \"unauthorized\");\n                            loginUrl.searchParams.set(\"callbackUrl\", pathname);\n                            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(loginUrl);\n                        }\n                    }\n                    // Custom domains ONLY serve public pages\n                    // Redirect all custom domain traffic to public eAIP pages\n                    const url = req.nextUrl.clone();\n                    const orgDomain = domainData.organization.domain;\n                    // Map root to public organization page\n                    if (pathname === \"/\") {\n                        url.pathname = `/public/${orgDomain}`;\n                        console.log(`[Custom Domain] Root rewrite: ${hostname}/ → ${url.pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.rewrite(url, {\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Map document IDs directly to public document pages\n                    // Pattern: /{documentId} → /public/{domain}/{documentId}\n                    const documentIdPattern = /^\\/([a-f0-9]{24})$/i; // MongoDB ObjectId pattern\n                    if (documentIdPattern.test(pathname)) {\n                        url.pathname = `/public/${orgDomain}${pathname}`;\n                        console.log(`[Custom Domain] Document rewrite: ${hostname}${pathname} → ${url.pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.rewrite(url, {\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Handle /public routes on custom domains\n                    if (pathname.startsWith(\"/public\")) {\n                        // If accessing /public/{orgDomain} on custom domain, redirect to root\n                        if (pathname === `/public/${orgDomain}`) {\n                            console.log(`[Custom Domain] Redirect /public/${orgDomain} → /`);\n                            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(new URL(\"/\", req.url));\n                        }\n                        // If accessing /public/{orgDomain}/{documentId}, redirect to /{documentId}\n                        const publicDocPattern = new RegExp(`^/public/${orgDomain.replace(\".\", \"\\\\.\")}/([a-f0-9]{24})$`, \"i\");\n                        const match = pathname.match(publicDocPattern);\n                        if (match) {\n                            const docId = match[1];\n                            console.log(`[Custom Domain] Redirect /public/${orgDomain}/${docId} → /${docId}`);\n                            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(new URL(`/${docId}`, req.url));\n                        }\n                        console.log(`[Custom Domain] Public route passthrough: ${pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.rewrite(url, {\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Allow API calls for public data\n                    if (pathname.startsWith(\"/api/public\")) {\n                        console.log(`[Custom Domain] API passthrough: ${pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next({\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Block all other routes on custom domains (admin, dashboard, auth, etc.)\n                    // Users must access the main app domain (eaip.flyclim.com) for these features\n                    console.log(`Custom domain ${cleanDomain} blocked access to: ${pathname}`);\n                    return new next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse(JSON.stringify({\n                        error: \"Access Denied\",\n                        message: `This custom domain only provides public eAIP access. For administration, please visit the main application at ${process.env.NEXTAUTH_URL || \"https://eaip.flyclim.com\"}`,\n                        code: \"CUSTOM_DOMAIN_PUBLIC_ONLY\"\n                    }), {\n                        status: 403,\n                        headers: {\n                            \"content-type\": \"application/json\"\n                        }\n                    });\n                }\n            }\n            // Domain not found in our system\n            return new next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse(JSON.stringify({\n                error: \"Domain not configured\",\n                message: `The domain ${cleanDomain} is not associated with any organization.`,\n                code: \"DOMAIN_NOT_FOUND\"\n            }), {\n                status: 404,\n                headers: {\n                    \"content-type\": \"application/json\"\n                }\n            });\n        } catch (error) {\n            console.error(\"Domain lookup error:\", error);\n            return new next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse(JSON.stringify({\n                error: \"Domain lookup failed\",\n                message: \"Unable to resolve domain configuration.\",\n                code: \"DOMAIN_LOOKUP_ERROR\"\n            }), {\n                status: 500,\n                headers: {\n                    \"content-type\": \"application/json\"\n                }\n            });\n        }\n    }\n    // Main domain handling - no special tenant validation needed\n    return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n}, {\n    callbacks: {\n        authorized: ({ token, req })=>{\n            const { pathname } = req.nextUrl;\n            // Define route categories\n            const publicRoutes = [\n                \"/public\",\n                \"/eaip\",\n                \"/api/public\",\n                \"/auth/signin\",\n                \"/auth/signup\",\n                \"/auth/error\",\n                \"/_next\",\n                \"/favicon.ico\"\n            ];\n            const protectedRoutes = [\n                \"/admin\",\n                \"/dashboard\",\n                \"/documents\",\n                \"/versions\",\n                \"/exports\",\n                \"/profile\",\n                \"/organization\",\n                \"/api/admin\",\n                \"/api/documents\",\n                \"/api/users\"\n            ];\n            // Allow public routes without authentication\n            if (publicRoutes.some((route)=>pathname.startsWith(route))) {\n                return true;\n            }\n            // Check if route requires authentication\n            const requiresAuth = protectedRoutes.some((route)=>pathname.startsWith(route));\n            if (requiresAuth) {\n                // Require valid token for protected routes\n                if (!token) {\n                    return false;\n                }\n                // Additional role-based checks\n                if (pathname.startsWith(\"/admin\") && token.role !== \"super_admin\") {\n                    return false;\n                }\n                return true;\n            }\n            // Default: allow access to unspecified routes\n            return true;\n        }\n    }\n}));\nconst config = {\n    matcher: [\n        /*\n     * Match all request paths except for the ones starting with:\n     * - api/auth (auth endpoints)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */ \"/((?!api/auth|_next/static|_next/image|favicon.ico|uploads|exports|auth).*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});
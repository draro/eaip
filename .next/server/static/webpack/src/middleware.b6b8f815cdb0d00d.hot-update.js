"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./node_modules/next/dist/esm/server/web/adapter.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/adapter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextRequestHint: () => (/* binding */ NextRequestHint),\n/* harmony export */   adapter: () => (/* binding */ adapter)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(middleware)/./node_modules/next/dist/esm/server/web/error.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/next/dist/esm/server/web/utils.js\");\n/* harmony import */ var _spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spec-extension/fetch-event */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js\");\n/* harmony import */ var _spec_extension_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spec-extension/request */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/request.js\");\n/* harmony import */ var _spec_extension_response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spec-extension/response */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/response.js\");\n/* harmony import */ var _shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/lib/router/utils/relativize-url */ \"(middleware)/./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js\");\n/* harmony import */ var _next_url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./next-url */ \"(middleware)/./node_modules/next/dist/esm/server/web/next-url.js\");\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal-utils */ \"(middleware)/./node_modules/next/dist/esm/server/internal-utils.js\");\n/* harmony import */ var _shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shared/lib/router/utils/app-paths */ \"(middleware)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\");\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(middleware)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/constants */ \"(middleware)/./node_modules/next/dist/esm/lib/constants.js\");\n/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./globals */ \"(middleware)/./node_modules/next/dist/esm/server/web/globals.js\");\n/* harmony import */ var _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../async-storage/request-async-storage-wrapper */ \"(middleware)/./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js\");\n/* harmony import */ var _client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../client/components/request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../lib/trace/tracer */ \"(middleware)/./node_modules/next/dist/esm/server/lib/trace/tracer.js\");\n/* harmony import */ var _lib_trace_constants__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../lib/trace/constants */ \"(middleware)/./node_modules/next/dist/esm/server/lib/trace/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass NextRequestHint extends _spec_extension_request__WEBPACK_IMPORTED_MODULE_3__.NextRequest {\n    constructor(params){\n        super(params.input, params.init);\n        this.sourcePage = params.page;\n    }\n    get request() {\n        throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    respondWith() {\n        throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    waitUntil() {\n        throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\nconst headersGetter = {\n    keys: (headers)=>Array.from(headers.keys()),\n    get: (headers, key)=>headers.get(key) ?? undefined\n};\nlet propagator = (request, fn)=>{\n    const tracer = (0,_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__.getTracer)();\n    return tracer.withPropagatedContext(request.headers, fn, headersGetter);\n};\nlet testApisIntercepted = false;\nfunction ensureTestApisIntercepted() {\n    if (!testApisIntercepted) {\n        testApisIntercepted = true;\n        if (process.env.NEXT_PRIVATE_TEST_PROXY === \"true\") {\n            const { interceptTestApis, wrapRequestHandler } = __webpack_require__(/*! next/dist/experimental/testmode/server-edge */ \"(middleware)/./node_modules/next/dist/experimental/testmode/server-edge.js\");\n            interceptTestApis();\n            propagator = wrapRequestHandler(propagator);\n        }\n    }\n}\nasync function adapter(params) {\n    ensureTestApisIntercepted();\n    await (0,_globals__WEBPACK_IMPORTED_MODULE_11__.ensureInstrumentationRegistered)();\n    // TODO-APP: use explicit marker for this\n    const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n    const prerenderManifest = typeof self.__PRERENDER_MANIFEST === \"string\" ? JSON.parse(self.__PRERENDER_MANIFEST) : undefined;\n    params.request.url = (0,_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_8__.normalizeRscURL)(params.request.url);\n    const requestUrl = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(params.request.url, {\n        headers: params.request.headers,\n        nextConfig: params.request.nextConfig\n    });\n    // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n    // Instead we use the keys before iteration.\n    const keys = [\n        ...requestUrl.searchParams.keys()\n    ];\n    for (const key of keys){\n        const value = requestUrl.searchParams.getAll(key);\n        if (key !== _lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX)) {\n            const normalizedKey = key.substring(_lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX.length);\n            requestUrl.searchParams.delete(normalizedKey);\n            for (const val of value){\n                requestUrl.searchParams.append(normalizedKey, val);\n            }\n            requestUrl.searchParams.delete(key);\n        }\n    }\n    // Ensure users only see page requests, never data requests.\n    const buildId = requestUrl.buildId;\n    requestUrl.buildId = \"\";\n    const isDataReq = params.request.headers[\"x-nextjs-data\"];\n    if (isDataReq && requestUrl.pathname === \"/index\") {\n        requestUrl.pathname = \"/\";\n    }\n    const requestHeaders = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.fromNodeOutgoingHttpHeaders)(params.request.headers);\n    const flightHeaders = new Map();\n    // Parameters should only be stripped for middleware\n    if (!isEdgeRendering) {\n        for (const param of _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_9__.FLIGHT_PARAMETERS){\n            const key = param.toString().toLowerCase();\n            const value = requestHeaders.get(key);\n            if (value) {\n                flightHeaders.set(key, requestHeaders.get(key));\n                requestHeaders.delete(key);\n            }\n        }\n    }\n    const normalizeUrl =  false ? 0 : requestUrl;\n    const request = new NextRequestHint({\n        page: params.page,\n        // Strip internal query parameters off the request.\n        input: (0,_internal_utils__WEBPACK_IMPORTED_MODULE_7__.stripInternalSearchParams)(normalizeUrl, true).toString(),\n        init: {\n            body: params.request.body,\n            geo: params.request.geo,\n            headers: requestHeaders,\n            ip: params.request.ip,\n            method: params.request.method,\n            nextConfig: params.request.nextConfig,\n            signal: params.request.signal\n        }\n    });\n    /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */ if (isDataReq) {\n        Object.defineProperty(request, \"__isData\", {\n            enumerable: false,\n            value: true\n        });\n    }\n    if (!globalThis.__incrementalCache && params.IncrementalCache) {\n        globalThis.__incrementalCache = new params.IncrementalCache({\n            appDir: true,\n            fetchCache: true,\n            minimalMode: \"development\" !== \"development\",\n            fetchCacheKeyPrefix: \"\",\n            dev: \"development\" === \"development\",\n            requestHeaders: params.request.headers,\n            requestProtocol: \"https\",\n            getPrerenderManifest: ()=>{\n                return {\n                    version: -1,\n                    routes: {},\n                    dynamicRoutes: {},\n                    notFoundRoutes: [],\n                    preview: {\n                        previewModeId: \"development-id\"\n                    }\n                };\n            }\n        });\n    }\n    const event = new _spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__.NextFetchEvent({\n        request,\n        page: params.page\n    });\n    let response;\n    let cookiesFromResponse;\n    response = await propagator(request, ()=>{\n        // we only care to make async storage available for middleware\n        const isMiddleware = params.page === \"/middleware\" || params.page === \"/src/middleware\";\n        if (isMiddleware) {\n            return (0,_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__.getTracer)().trace(_lib_trace_constants__WEBPACK_IMPORTED_MODULE_15__.MiddlewareSpan.execute, {\n                spanName: `middleware ${request.method} ${request.nextUrl.pathname}`,\n                attributes: {\n                    \"http.target\": request.nextUrl.pathname,\n                    \"http.method\": request.method\n                }\n            }, ()=>_async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_12__.RequestAsyncStorageWrapper.wrap(_client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_13__.requestAsyncStorage, {\n                    req: request,\n                    renderOpts: {\n                        onUpdateCookies: (cookies)=>{\n                            cookiesFromResponse = cookies;\n                        },\n                        // @ts-expect-error: TODO: investigate why previewProps isn't on RenderOpts\n                        previewProps: (prerenderManifest == null ? void 0 : prerenderManifest.preview) || {\n                            previewModeId: \"development-id\",\n                            previewModeEncryptionKey: \"\",\n                            previewModeSigningKey: \"\"\n                        }\n                    }\n                }, ()=>params.handler(request, event)));\n        }\n        return params.handler(request, event);\n    });\n    // check if response is a Response object\n    if (response && !(response instanceof Response)) {\n        throw new TypeError(\"Expected an instance of Response to be returned\");\n    }\n    if (response && cookiesFromResponse) {\n        response.headers.set(\"set-cookie\", cookiesFromResponse);\n    }\n    /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */ const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n    if (response && rewrite && !isEdgeRendering) {\n        const rewriteUrl = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(rewrite, {\n            forceLocale: true,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        if (true) {\n            if (rewriteUrl.host === request.nextUrl.host) {\n                rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n                response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n            }\n        }\n        /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */ const relativizedRewrite = (0,_shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__.relativizeURL)(String(rewriteUrl), String(requestUrl));\n        if (isDataReq && // if the rewrite is external and external rewrite\n        // resolving config is enabled don't add this header\n        // so the upstream app can set it instead\n        !( false && 0)) {\n            response.headers.set(\"x-nextjs-rewrite\", relativizedRewrite);\n        }\n    }\n    /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */ const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n    if (response && redirect && !isEdgeRendering) {\n        const redirectURL = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(redirect, {\n            forceLocale: false,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */ response = new Response(response.body, response);\n        if (true) {\n            if (redirectURL.host === request.nextUrl.host) {\n                redirectURL.buildId = buildId || redirectURL.buildId;\n                response.headers.set(\"Location\", String(redirectURL));\n            }\n        }\n        /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */ if (isDataReq) {\n            response.headers.delete(\"Location\");\n            response.headers.set(\"x-nextjs-redirect\", (0,_shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__.relativizeURL)(String(redirectURL), String(requestUrl)));\n        }\n    }\n    const finalResponse = response ? response : _spec_extension_response__WEBPACK_IMPORTED_MODULE_4__.NextResponse.next();\n    // Flight headers are not overridable / removable so they are applied at the end.\n    const middlewareOverrideHeaders = finalResponse.headers.get(\"x-middleware-override-headers\");\n    const overwrittenHeaders = [];\n    if (middlewareOverrideHeaders) {\n        for (const [key, value] of flightHeaders){\n            finalResponse.headers.set(`x-middleware-request-${key}`, value);\n            overwrittenHeaders.push(key);\n        }\n        if (overwrittenHeaders.length > 0) {\n            finalResponse.headers.set(\"x-middleware-override-headers\", middlewareOverrideHeaders + \",\" + overwrittenHeaders.join(\",\"));\n        }\n    }\n    return {\n        response: finalResponse,\n        waitUntil: Promise.all(event[_spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__.waitUntilSymbol]),\n        fetchMetrics: request.fetchMetrics\n    };\n}\n\n//# sourceMappingURL=adapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/server/web/adapter.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutableRequestCookiesAdapter: () => (/* binding */ MutableRequestCookiesAdapter),\n/* harmony export */   ReadonlyRequestCookiesError: () => (/* binding */ ReadonlyRequestCookiesError),\n/* harmony export */   RequestCookiesAdapter: () => (/* binding */ RequestCookiesAdapter),\n/* harmony export */   appendMutableCookies: () => (/* binding */ appendMutableCookies),\n/* harmony export */   getModifiedCookieValues: () => (/* binding */ getModifiedCookieValues)\n/* harmony export */ });\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cookies */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n/* harmony import */ var _reflect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reflect */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js\");\n/* harmony import */ var _client_components_static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../client/components/static-generation-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js\");\n\n\n\n/**\n * @internal\n */ class ReadonlyRequestCookiesError extends Error {\n    constructor(){\n        super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n    }\n    static callable() {\n        throw new ReadonlyRequestCookiesError();\n    }\n}\nclass RequestCookiesAdapter {\n    static seal(cookies) {\n        return new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"clear\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyRequestCookiesError.callable;\n                    default:\n                        return _reflect__WEBPACK_IMPORTED_MODULE_1__.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nfunction getModifiedCookieValues(cookies) {\n    const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n    if (!modified || !Array.isArray(modified) || modified.length === 0) {\n        return [];\n    }\n    return modified;\n}\nfunction appendMutableCookies(headers, mutableCookies) {\n    const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n    if (modifiedCookieValues.length === 0) {\n        return false;\n    }\n    // Return a new response that extends the response with\n    // the modified cookies as fallbacks. `res` cookies\n    // will still take precedence.\n    const resCookies = new _cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies(headers);\n    const returnedCookies = resCookies.getAll();\n    // Set the modified cookies as fallbacks.\n    for (const cookie of modifiedCookieValues){\n        resCookies.set(cookie);\n    }\n    // Set the original cookies as the final values.\n    for (const cookie of returnedCookies){\n        resCookies.set(cookie);\n    }\n    return true;\n}\nclass MutableRequestCookiesAdapter {\n    static wrap(cookies, onUpdateCookies) {\n        const responseCookies = new _cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies(new Headers());\n        for (const cookie of cookies.getAll()){\n            responseCookies.set(cookie);\n        }\n        let modifiedValues = [];\n        const modifiedCookies = new Set();\n        const updateResponseCookies = ()=>{\n            // TODO-APP: change method of getting staticGenerationAsyncStore\n            const staticGenerationAsyncStore = _client_components_static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_2__.staticGenerationAsyncStorage.getStore();\n            if (staticGenerationAsyncStore) {\n                staticGenerationAsyncStore.pathWasRevalidated = true;\n            }\n            const allCookies = responseCookies.getAll();\n            modifiedValues = allCookies.filter((c)=>modifiedCookies.has(c.name));\n            if (onUpdateCookies) {\n                const serializedCookies = [];\n                for (const cookie of modifiedValues){\n                    const tempCookies = new _cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies(new Headers());\n                    tempCookies.set(cookie);\n                    serializedCookies.push(tempCookies.toString());\n                }\n                onUpdateCookies(serializedCookies);\n            }\n        };\n        return new Proxy(responseCookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    // A special symbol to get the modified cookie values\n                    case SYMBOL_MODIFY_COOKIE_VALUES:\n                        return modifiedValues;\n                    // TODO: Throw error if trying to set a cookie after the response\n                    // headers have been set.\n                    case \"delete\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                target.delete(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    case \"set\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                return target.set(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    default:\n                        return _reflect__WEBPACK_IMPORTED_MODULE_1__.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=request-cookies.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\n");

/***/ }),

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/middleware */ \"(middleware)/./node_modules/next-auth/middleware.js\");\n/* harmony import */ var next_auth_middleware__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_middleware__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var _lib_domain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/domain */ \"(middleware)/./src/lib/domain.ts\");\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_auth_middleware__WEBPACK_IMPORTED_MODULE_0__.withAuth)(async function middleware(req) {\n    const { pathname } = req.nextUrl;\n    const token = req.nextauth.token;\n    // Get hostname from X-Forwarded-Host (Nginx proxy) or fall back to req.nextUrl.hostname\n    const forwardedHost = req.headers.get(\"x-forwarded-host\") || req.headers.get(\"host\");\n    const hostname = forwardedHost;\n    console.log(`[Middleware] Request: ${hostname}${pathname}`, {\n        \"x-forwarded-host\": req.headers.get(\"x-forwarded-host\"),\n        host: req.headers.get(\"host\"),\n        \"nextUrl.hostname\": req.nextUrl.hostname\n    });\n    // Skip processing for localhost and development\n    if (!req.headers.get(\"x-middleware-request\") && (hostname === \"localhost\" || hostname.includes(\"localhost\"))) {\n        console.log(\"[Middleware] Skipping external localhost\");\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n    }\n    // Simple domain extraction\n    const cleanDomain = hostname.toLowerCase().replace(/^www\\./, \"\");\n    // Check if this is a custom domain (not our main application domains)\n    const mainAppDomain = process.env.NEXTAUTH_URL?.replace(/^https?:\\/\\//, \"\").split(\"/\")[0] || \"eaip.flyclim.com\";\n    const isMainDomain = hostname === mainAppDomain || hostname === \"eaip.flyclim.com\" || // Always treat eaip.flyclim.com as main domain\n    hostname === \"localhost\" || hostname === \"0.0.0.0\" || hostname.includes(\"localhost\") || hostname.includes(\"vercel.app\") || hostname.includes(\"netlify.app\");\n    console.log(`[Middleware] Domain check:`, {\n        hostname,\n        cleanDomain,\n        mainAppDomain,\n        isMainDomain\n    });\n    // Handle tenant-specific domain routing\n    if (!isMainDomain && cleanDomain !== \"localhost\") {\n        try {\n            // For custom domains, use an API call to lookup organization\n            // Use localhost for internal API calls to avoid SSL issues\n            const internalOrigin = \"http://localhost:3000\";\n            const domainLookupUrl = new URL(\"/api/organizations/by-domain\", internalOrigin);\n            domainLookupUrl.searchParams.set(\"domain\", cleanDomain);\n            console.log(\"[Middleware] Fetching org data from:\", domainLookupUrl.toString());\n            const domainResponse = await fetch(domainLookupUrl.toString(), {\n                headers: {\n                    \"x-middleware-request\": \"true\"\n                }\n            });\n            if (domainResponse.ok) {\n                const domainData = await domainResponse.json();\n                if (domainData.success && domainData.organization) {\n                    // Set organization context headers\n                    const requestHeaders = new Headers(req.headers);\n                    requestHeaders.set(\"x-tenant-domain\", cleanDomain);\n                    requestHeaders.set(\"x-tenant-org-id\", domainData.organization._id);\n                    requestHeaders.set(\"x-tenant-org-name\", domainData.organization.name);\n                    // For authenticated users, validate they belong to this organization\n                    if (token) {\n                        const userOrgId = token.organizationId;\n                        const domainOrgId = domainData.organization._id;\n                        // Block cross-tenant access\n                        if (!_lib_domain__WEBPACK_IMPORTED_MODULE_2__.DomainService.validateUserAccess(userOrgId, domainOrgId) && !pathname.startsWith(\"/auth/signin\")) {\n                            console.log(`Access denied: User org ${userOrgId} accessing domain org ${domainOrgId}`);\n                            // Redirect to domain-specific login\n                            const loginUrl = new URL(\"/auth/signin\", req.url);\n                            loginUrl.searchParams.set(\"error\", \"unauthorized\");\n                            loginUrl.searchParams.set(\"callbackUrl\", pathname);\n                            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(loginUrl);\n                        }\n                    }\n                    // Custom domains ONLY serve public pages\n                    // Redirect all custom domain traffic to public eAIP pages\n                    const url = req.nextUrl.clone();\n                    const orgDomain = domainData.organization.domain;\n                    // Map root to public organization page\n                    if (pathname === \"/\") {\n                        url.pathname = `/public/${orgDomain}`;\n                        console.log(`[Custom Domain] Root rewrite: ${hostname}/ → ${url.pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.rewrite(url, {\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Map document IDs directly to public document pages\n                    // Pattern: /{documentId} → /public/{domain}/{documentId}\n                    const documentIdPattern = /^\\/([a-f0-9]{24})$/i; // MongoDB ObjectId pattern\n                    if (documentIdPattern.test(pathname)) {\n                        url.pathname = `/public/${orgDomain}${pathname}`;\n                        console.log(`[Custom Domain] Document rewrite: ${hostname}${pathname} → ${url.pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.rewrite(url, {\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Handle /public routes on custom domains\n                    if (pathname.startsWith(\"/public\")) {\n                        // If accessing /public/{orgDomain} on custom domain, redirect to root\n                        if (pathname === `/public/${orgDomain}`) {\n                            console.log(`[Custom Domain] Redirect /public/${orgDomain} → /`);\n                            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(new URL(\"/\", req.url));\n                        }\n                        // If accessing /public/{orgDomain}/{documentId}, redirect to /{documentId}\n                        const publicDocPattern = new RegExp(`^/public/${orgDomain.replace(\".\", \"\\\\.\")}/([a-f0-9]{24})$`, \"i\");\n                        const match = pathname.match(publicDocPattern);\n                        if (match) {\n                            const docId = match[1];\n                            console.log(`[Custom Domain] Redirect /public/${orgDomain}/${docId} → /${docId}`);\n                            return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(new URL(`/${docId}`, req.url));\n                        }\n                        console.log(`[Custom Domain] Public route passthrough: ${pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.rewrite(url, {\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Allow API calls for public data\n                    if (pathname.startsWith(\"/api/public\")) {\n                        console.log(`[Custom Domain] API passthrough: ${pathname}`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next({\n                            request: {\n                                headers: requestHeaders\n                            }\n                        });\n                    }\n                    // Block all other routes on custom domains (admin, dashboard, auth, etc.)\n                    // Users must access the main app domain (eaip.flyclim.com) for these features\n                    console.log(`Custom domain ${cleanDomain} blocked access to: ${pathname}`);\n                    return new next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse(JSON.stringify({\n                        error: \"Access Denied\",\n                        message: `This custom domain only provides public eAIP access. For administration, please visit the main application at ${process.env.NEXTAUTH_URL || \"https://eaip.flyclim.com\"}`,\n                        code: \"CUSTOM_DOMAIN_PUBLIC_ONLY\"\n                    }), {\n                        status: 403,\n                        headers: {\n                            \"content-type\": \"application/json\"\n                        }\n                    });\n                }\n            }\n            // Domain not found in our system\n            return new next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse(JSON.stringify({\n                error: \"Domain not configured\",\n                message: `The domain ${cleanDomain} is not associated with any organization.`,\n                code: \"DOMAIN_NOT_FOUND\"\n            }), {\n                status: 404,\n                headers: {\n                    \"content-type\": \"application/json\"\n                }\n            });\n        } catch (error) {\n            console.error(\"Domain lookup error:\", error);\n            return new next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse(JSON.stringify({\n                error: \"Domain lookup failed\",\n                message: \"Unable to resolve domain configuration.\",\n                code: \"DOMAIN_LOOKUP_ERROR\"\n            }), {\n                status: 500,\n                headers: {\n                    \"content-type\": \"application/json\"\n                }\n            });\n        }\n    }\n    // Main domain handling - no special tenant validation needed\n    return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n}, {\n    callbacks: {\n        authorized: ({ token, req })=>{\n            const { pathname } = req.nextUrl;\n            // Define route categories\n            const publicRoutes = [\n                \"/public\",\n                \"/eaip\",\n                \"/api/public\",\n                \"/auth/signin\",\n                \"/auth/signup\",\n                \"/auth/error\",\n                \"/_next\",\n                \"/favicon.ico\"\n            ];\n            const protectedRoutes = [\n                \"/admin\",\n                \"/dashboard\",\n                \"/documents\",\n                \"/versions\",\n                \"/exports\",\n                \"/profile\",\n                \"/organization\",\n                \"/api/admin\",\n                \"/api/documents\",\n                \"/api/users\"\n            ];\n            // Allow public routes without authentication\n            if (publicRoutes.some((route)=>pathname.startsWith(route))) {\n                return true;\n            }\n            // Check if route requires authentication\n            const requiresAuth = protectedRoutes.some((route)=>pathname.startsWith(route));\n            if (requiresAuth) {\n                // Require valid token for protected routes\n                if (!token) {\n                    return false;\n                }\n                // Additional role-based checks\n                if (pathname.startsWith(\"/admin\") && token.role !== \"super_admin\") {\n                    return false;\n                }\n                return true;\n            }\n            // Default: allow access to unspecified routes\n            return true;\n        }\n    }\n}));\nconst config = {\n    matcher: [\n        /*\n     * Match all request paths except for the ones starting with:\n     * - api/auth (auth endpoints)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */ \"/((?!api/auth|_next/static|_next/image|favicon.ico|uploads|exports|auth).*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});